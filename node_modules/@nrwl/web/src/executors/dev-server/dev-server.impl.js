"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const devkit_1 = require("@nrwl/devkit");
const rxjs_for_await_1 = require("rxjs-for-await");
const operators_1 = require("rxjs/operators");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const run_webpack_1 = require("@nrwl/workspace/src/utilities/run-webpack");
const normalize_1 = require("../../utils/normalize");
const devserver_config_1 = require("../../utils/devserver.config");
const buildable_libs_utils_1 = require("@nrwl/workspace/src/utilities/buildable-libs-utils");
const project_graph_1 = require("@nrwl/workspace/src/core/project-graph");
function devServerExecutor(serveOptions, context) {
    const sourceRoot = context.workspace.projects[context.projectName].sourceRoot;
    const buildOptions = normalize_1.normalizeWebBuildOptions(getBuildOptions(serveOptions, context), context.root, sourceRoot);
    let webpackConfig = devserver_config_1.getDevServerConfig(context.root, sourceRoot, buildOptions, serveOptions);
    if (buildOptions.webpackConfig) {
        webpackConfig = require(buildOptions.webpackConfig)(webpackConfig, {
            buildOptions,
            configuration: serveOptions.buildTarget.split(':')[2],
        });
    }
    if (!buildOptions.buildLibsFromSource) {
        const projGraph = project_graph_1.createProjectGraph();
        const { target, dependencies } = buildable_libs_utils_1.calculateProjectDependencies(projGraph, context.root, context.projectName, 'build', // should be generalized
        context.configurationName);
        buildOptions.tsConfig = buildable_libs_utils_1.createTmpTsConfig(devkit_1.joinPathFragments(context.root, buildOptions.tsConfig), context.root, target.data.root, dependencies);
    }
    return rxjs_for_await_1.eachValueFrom(run_webpack_1.runWebpackDevServer(webpackConfig, webpack, WebpackDevServer).pipe(operators_1.tap(({ stats }) => {
        console.info(stats.toString(webpackConfig.stats));
    }), operators_1.map(({ baseUrl, stats }) => {
        return {
            baseUrl,
            emittedFiles: run_webpack_1.getEmittedFiles(stats),
            success: !stats.hasErrors(),
        };
    })));
}
exports.default = devServerExecutor;
function getBuildOptions(options, context) {
    const target = devkit_1.parseTargetString(options.buildTarget);
    const overrides = {
        watch: false,
    };
    if (options.maxWorkers) {
        overrides.maxWorkers = options.maxWorkers;
    }
    if (options.memoryLimit) {
        overrides.memoryLimit = options.memoryLimit;
    }
    if (options.baseHref) {
        overrides.baseHref = options.baseHref;
    }
    const buildOptions = devkit_1.readTargetOptions(target, context);
    return Object.assign(Object.assign({}, buildOptions), overrides);
}
//# sourceMappingURL=dev-server.impl.js.map