"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const devkit_1 = require("@nrwl/devkit");
const ignore_1 = require("ignore");
const fs_1 = require("fs");
const chokidar_1 = require("chokidar");
const file_utils_1 = require("@nrwl/workspace/src/core/file-utils");
function getHttpServerArgs(options) {
    const args = [];
    if (options.port) {
        args.push(`-p ${options.port}`);
    }
    if (options.host) {
        args.push(`-a ${options.host}`);
    }
    if (options.ssl) {
        args.push(`-S`);
    }
    if (options.sslCert) {
        args.push(`-C ${options.sslCert}`);
    }
    if (options.sslKey) {
        args.push(`-K ${options.sslKey}`);
    }
    if (options.proxyUrl) {
        args.push(`-P ${options.proxyUrl}`);
    }
    return args;
}
function getBuildTargetCommand(options) {
    const cmd = [`npx nx run ${options.buildTarget}`];
    if (options.withDeps) {
        cmd.push(`--with-deps`);
    }
    if (options.parallel) {
        cmd.push(`--parallel`);
    }
    if (options.maxParallel) {
        cmd.push(`--maxParallel=${options.maxParallel}`);
    }
    return cmd.join(' ');
}
function getBuildTargetOutputPath(options, context) {
    let buildOptions;
    try {
        const [project, target, config] = options.buildTarget.split(':');
        const buildTarget = context.workspace.projects[project].targets[target];
        buildOptions = config
            ? Object.assign(Object.assign({}, buildTarget.options), buildTarget.configurations[config]) : buildTarget.options;
    }
    catch (e) {
        throw new Error(`Invalid buildTarget: ${options.buildTarget}`);
    }
    // TODO: vsavkin we should also check outputs
    const outputPath = buildOptions.outputPath;
    if (!outputPath) {
        throw new Error(`Invalid buildTarget: ${options.buildTarget}. The target must contain outputPath property.`);
    }
    return outputPath;
}
function getIgnoredGlobs(root) {
    const ig = ignore_1.default();
    try {
        ig.add(fs_1.readFileSync(`${root}/.gitignore`, 'utf-8'));
    }
    catch (_a) { }
    try {
        ig.add(fs_1.readFileSync(`${root}/.nxignore`, 'utf-8'));
    }
    catch (_b) { }
    return ig;
}
function createFileWatcher(root, changeHandler) {
    const ignoredGlobs = getIgnoredGlobs(root);
    const layout = file_utils_1.workspaceLayout();
    const watcher = chokidar_1.watch([
        devkit_1.joinPathFragments(layout.appsDir, '**'),
        devkit_1.joinPathFragments(layout.libsDir, '**'),
    ], {
        cwd: root,
        ignoreInitial: true,
    });
    watcher.on('all', (_event, path) => {
        if (ignoredGlobs.ignores(path))
            return;
        changeHandler();
    });
    return { close: () => watcher.close() };
}
function fileServerExecutor(options, context) {
    return tslib_1.__asyncGenerator(this, arguments, function* fileServerExecutor_1() {
        let running = false;
        const run = () => {
            if (!running) {
                running = true;
                try {
                    child_process_1.execSync(getBuildTargetCommand(options), {
                        stdio: [0, 1, 2],
                    });
                }
                catch (_a) { }
                running = false;
            }
        };
        const watcher = createFileWatcher(context.root, run);
        // perform initial run
        run();
        const outputPath = getBuildTargetOutputPath(options, context);
        const args = getHttpServerArgs(options);
        const serve = child_process_1.exec(`npx http-server ${outputPath} ${args.join(' ')}`, {
            cwd: context.root,
        });
        const processExitListener = () => {
            serve.kill();
            watcher.close();
        };
        process.on('exit', processExitListener);
        process.on('SIGTERM', processExitListener);
        serve.stdout.on('data', (chunk) => {
            if (chunk.toString().indexOf('GET') === -1) {
                process.stdout.write(chunk);
            }
        });
        serve.stderr.on('data', (chunk) => {
            process.stderr.write(chunk);
        });
        yield yield tslib_1.__await({
            success: true,
            baseUrl: `${options.ssl ? 'https' : 'http'}://${options.host}:${options.port}`,
        });
        return yield tslib_1.__await(new Promise((res) => {
            serve.on('exit', (code) => {
                if (code == 0) {
                    res({ success: true });
                }
                else {
                    res({ success: false });
                }
            });
        }));
    });
}
exports.default = fileServerExecutor;
//# sourceMappingURL=file-server.impl.js.map